guidedModel =// @startlock{	Proxy :	{		methods :		{// @endlock            runOnServer: function (ssjs)			{// @lock				"use strict";                var					sandboxModule,					sandbox,					seen,					response,					limitedResult,					index,					entity,					result,					toString;				function isEntity(object) {					return toString.apply(object) === '[object Entity]';				}				function isEntityCollection(object) {					return toString.apply(object) === '[object EntityCollection]';									}				function isEntityOrEntityCollection(object) {					return toString.apply(object).substr(0, 14) === '[object Entity';									}				function isImage(object) {					return toString.apply(object) === '[object Image]';				}				function isArray(object) {					return toString.apply(object) === '[object Array]';				}				function safeStringify(key, val) {		            if (typeof val === "object" && val !== null) {		                if (seen.indexOf(val) !== -1) {		                    return "recursive reference";		                }		                seen.push(val);		            } else if (typeof val === "function") {		                if (seen.indexOf(val) !== -1) {		                    return "recursive reference";		                }		                seen.push("function () {}");		            }		            return val;		        }				if (!ssjs) {				    return 'code empty';				    //throw new Error('code empty');					}				toString = Object.prototype.toString;				seen = [];				//debugger;				//Sandbox = require('jsSandBox/index').Sandbox;				sandboxModule = require('wakandaSandbox/index');			    sandbox = new sandboxModule.WakandaSandbox(					//application,					{						// HTML5 properties						'name': true,						'Blob': true,						'sessionStorage': true,						// HTML5 properties						'Buffer': true,						// Wakanda specific properties						'administrator': true,						'dateToIso': true,						'ds': true,						'generateUUID': true,						'getURLQuery': true,						'isoToDate': true,						//'os': true,						'pattern': true,						//'process': true,						'wildchar': true					}				);			    result = sandbox.run(ssjs, 200);			    result = sandboxModule.getNativeObject(result) || result;			    response = {};			    switch (toString.apply(result)) {			    case '[object Entity]':			        response = result;			        break;			    case '[object EntityCollection]':			        response = result;			        break;			    // HTTPStream supports Image, Stream (text, binary), and File			    // It doesn't support Blob and Buffer yet			    case '[object Image]':			        response = {			            HTTPStream: result,			            headers: {			                'Content-Type': 'text/plain; charset=x-user-defined',                            'X-Original-Content-Type': 'image/jpeg',			                'X-Image-Data': JSON.stringify(result)			            }			        };			        break;			    case '[object Array]':		            /*		            if (result.every(function (element) { return isEntity(element); })) {		                // it is an array of entities		                response.type = 'collection';		                response.dataclass = result[0].getDataClass().getName();		                sessionStorage.currentCollection = result.map(function (entity) {return entity.ID});		            }		            */		            if (result.length > 40) {		                limitedResult = [];		                for (index = 0; index < 40; index += 1) {		                    limitedResult.push(result[index]);		                }		                response = {				            HTTPStream: JSON.parse(JSON.stringify(limitedResult, safeStringify)),				            headers: {				                'Content-Type': 'application/json',	                            'X-Original-Array-Length': result.length                            }                        };                    } else {                        response.result = JSON.parse(JSON.stringify(result, safeStringify));                    }                    break;                default:                    // specific hanfling for values not supported by JSON                    if (isNaN(result)) {                        response = {                            HTTPStream: {result: 'NaN'},                            headers: {                                'Content-Type': 'application/json',                                'X-JSON-Unsupported-JS-Value': 'NaN'                            }                        };                    } else if ([undefined, Infinity, -Infinity].indexOf(result) > -1) {                        response = {                            HTTPStream: {result: String(result)},                            headers: {                                'Content-Type': 'application/json',                                'X-JSON-Unsupported-JS-Value': String(result)                            }                        };                    } else {                        response = JSON.parse(JSON.stringify(result, safeStringify));                    }                }                return response;			}// @startlock		}	},	Employee :	{		age :		{			onSort:function(ascending)			{// @endlock				"use strict";				return (ascending ? "birthDate desc" : "birthDate");			},// @startlock			onQuery:function(compOperator, valueToCompare)			{// @endlock				"use strict";				var				    not,				    today,				    lowerlimit,				    upperlimit,				    result;				if (valueToCompare === null) {					not = ["=", "=="].indexOf(compOperator) > -1 ? 'not' : '';					result = "birthDate is" + not + 'null';				} else {					today = new Date();					lowerlimit = new Date(					    today.getFullYear() - valueToCompare - 1,					    today.getMonth(),					    today.getDate(),					    today.getHours(),					    today.getMinutes()					);					upperlimit = new Date(					    today.getFullYear() - valueToCompare,					    today.getMonth(),					    today.getDate(),					    today.getHours(),					    today.getMinutes()					);					switch (compOperator) {					case '=':					case '==':					case '!=':					case '!==':						result = "birthDate >= '" + lowerlimit.toISOString() + "'";						result += " and birthDate < '" + upperlimit.toISOString() + "'";						if (['!=', '!=='].indexOf(compOperator) > -1) {							result = "not (" + result + ")";						}						break;					case '>':						result = "birthDate < '" + lowerlimit.toISOString() + "'";						break;					case '>=':						result = "birthDate <= '" + upperlimit.toISOString() + "'";						break;					case '<':						result = "birthDate > '" + upperlimit.toISOString() + "'";						break;					case '<=':						result = "birthDate >= '" + lowerlimit.toISOString() + "'";						break;					default:						console.warn('unknown operator:', compOperator);						result = null;					}				}				return result;			},// @startlock			onGet:function()			{// @endlock				"use strict";				var				    today,				    interval,				    nbYears,				    age;				if (this.birthDate == null) {					age = 0;				} else {					today = new Date();					interval = today.getTime() - this.birthDate.getTime();					nbYears = Math.floor(interval / (1000 * 60 * 60 * 24 * 365.25));					age = nbYears;				}				return age;			}// @startlock		},		fullName :		{			onGet:function()			{// @endlock				"use strict";				return this.firstName + " " + this.lastName;			}// @startlock		}	}};// @endlock