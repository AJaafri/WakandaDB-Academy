var    Sandbox,    sandbox;function isEntity(object) {	return Object.prototype.toString.apply(object) === '[object Entity]';}function isEntityCollection(object) {	return Object.prototype.toString.apply(object) === '[object EntityCollection]';	}Sandbox = require('jsSandBox').Sandbox;sandbox = new Sandbox(	application,	{		// HTML5 properties		'name': true,		'Blob': true,		'XMLHttpRequest': true,		'sessionStorage': true,		// Wakanda specific properties		'administrator': true,		'ds': true,		'pattern': true		//process: true,		//os: true,	});/** * @public * @method execute * @param {string} ssjs * @return string **/exports.execute = function execute(ssjs) {	var		response,		limitedResult,		index,		entity,		result,		seen;	response = {};	seen = [];    //return filterResults(sandbox.run(ssjs));//    result = ssjs ? sandbox.run(ssjs) || 'undefined';    result = sandbox.run(ssjs);    if (typeof result === 'object' && result !== null) {        if (result.getDataClass) {            response.dataclass = result.getDataClass().getName();            if (isEntity(result)) {                response.type = 'entity';                response.ID = result.ID;            } else {                response.type = 'collection';                response.originalLength = result.length;                response.collectionId = Date.now();                sessionStorage['collection' + response.collectionId] = result.toArray('ID').map(function (entity) {return entity.ID});                if (result.length > 40) {                    limitedResult = ds[response.dataclass].createEntityCollection();                    for (entity = result.first(), index = 0; index < 40; entity = entity.next(), index += 1) {                        limitedResult.add(entity);                    }                    result = limitedResult;                }            }        }        if (result instanceof Array) {        	response.originalLength = result.length;        	/*        	if (result.every(function (element) { return isEntity(element); })) {        		// it is an array of entities        		response.type = 'collection';        		response.dataclass = result[0].getDataClass().getName();        		sessionStorage.currentCollection = result.map(function (entity) {return entity.ID});        	}        	*/        	if (result.length > 40) {                limitedResult = [];                for (index = 0; index < 40; index += 1) {                    limitedResult.push(result[index]);                }                result = limitedResult;            }        }    }    response.result = JSON.stringify(        result,        function (key, val) {            if (typeof val === "object") {                if (seen.indexOf(val) !== -1) {                    return undefined;                }                seen.push(val);            } else if (typeof val === "function") {                if (seen.indexOf(val) !== -1) {                    return undefined;                }                seen.push("function () {}");            }            return val;        }    );    return response;};