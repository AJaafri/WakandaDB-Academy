exports = exports || {};// a instance must be created to have "this" not bound to the global objectfunction Sandbox(globalObject, allowedProperties) {	"use strict";	var        safeJSCoreProperties,        filteredProperties,        sandbox;	// getter for restricted properties	function accessRestricted() {	    return 'Access Restricted';	}	function filterProperties(propName) {		var			property,			propertyDescriptor;		property = globalObject[propName];		propertyDescriptor = Object.getOwnPropertyDescriptor(globalObject, propName);		if (typeof property === 'function') {			if (!allowedProperties.hasOwnProperty(propName) && !safeJSCoreProperties.hasOwnProperty(propName)) {				filteredProperties[propName] = {					value: accessRestricted,					writable: false,					configurable: false,					enumerable: propertyDescriptor.enumarable				};			} else if (propName[0] !== propName[0].toUpperCase()) {				// if not itself a constructor, it might requie the original application context				sandbox[propName] = property.bind(application);			}		} else if (property === globalObject) {			sandbox[propName] = sandbox;		} else {			if (!allowedProperties.hasOwnProperty(propName) && !safeJSCoreProperties.hasOwnProperty(propName)) {				filteredProperties[propName] = {					get: accessRestricted,					set: accessRestricted,					configurable: false,					enumerable: propertyDescriptor.enumarable				};			} else {				sandbox[propName] = property;			}		}	}	// this object that will replace the orriginal global application object	sandbox = this;	// declare safe ECMAScript 5.1 accessible global properties	safeJSCoreProperties = {		'Array': true,		'Boolean': true,		'Date': true,		'Error': true,		'EvalError': true,		'Function': true,		'Infinity': true,		'JSON': true,		'Math': true,		'NaN': true,		'Number': true,		'Object': true,		'RangeError': true,		'ReferenceError': true,		'RegExp': true,		'String': true,		'SyntaxError': true,		'TypeError': true,		'URIError': true,		'decodeURI': true,		'decodeURIComponent': true,		'encodeURI': true,		'encodeURIComponent': true,		'escape': true,		'eval': true,		'isFinite': true,		'isNaN': true,		'parseFloat': true,		'parseInt': true,		'undefined': true,		'unescape': true	};	// set the property filter	filteredProperties = {};	Object.getOwnPropertyNames(globalObject).forEach(filterProperties);	// apply the property filter to the global object mask	Object.defineProperties(		sandbox,		filteredProperties	);}// polyfill of the ECMAScript 5 Function bind() methodif (!Function.prototype.hasOwnProperty("bind")) {    Function.prototype.bind = function (context) {    	    	"use strict";        var            argsAsArray,            functionToBind,            boundFunction;        function Nop() {}        Nop.prototype = this.prototype;        if (typeof this !== "function") {            // closest thing possible to the ECMAScript 5 internal IsCallable function            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");        }        functionToBind = this;        argsAsArray = Array.prototype.slice.call(arguments, 1);        boundFunction = function boundFunction() {            return functionToBind.apply(                this instanceof Nop && context ? this : context,                argsAsArray.concat(Array.prototype.slice.call(arguments))            );        };        boundFunction.prototype = new Nop();        return boundFunction;    };}function runSandboxed(ssjs) {	if (ssjs === '') {		return eval('');	}	if (ssjs.indexOf('allowJavaScript') > -1) {		throw new Error('JavaScript mode forbidden');	}    return eval('with (this) {' + ssjs + '}');};Object.defineProperty(	Sandbox.prototype,	"run",	{		value: runSandboxed,		writable: false,		configurable: false,		enumerable: true	});exports.Sandbox = Sandbox;exports;//Object.freeze(exports);